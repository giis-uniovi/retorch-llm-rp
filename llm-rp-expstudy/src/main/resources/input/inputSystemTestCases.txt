package com.fullteaching.e2e.no_elastest.functional.test;

import com.fullteaching.e2e.no_elastest.common.BaseLoggedTest;
import com.fullteaching.e2e.no_elastest.common.CourseNavigationUtilities;
import com.fullteaching.e2e.no_elastest.common.ForumNavigationUtilities;
import com.fullteaching.e2e.no_elastest.common.NavigationUtilities;
import com.fullteaching.e2e.no_elastest.common.exception.ElementNotFoundException;
import com.fullteaching.e2e.no_elastest.utils.Click;
import com.fullteaching.e2e.no_elastest.utils.DOMManager;
import com.fullteaching.e2e.no_elastest.utils.ParameterLoader;
import com.fullteaching.e2e.no_elastest.utils.Wait;
import giis.retorch.annotations.AccessMode;
import giis.retorch.annotations.Resource;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Tag;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.Arguments;
import org.junit.jupiter.params.provider.MethodSource;
import org.openqa.selenium.By;
import org.openqa.selenium.StaleElementReferenceException;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.support.ui.ExpectedCondition;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.slf4j.Logger;

import java.io.IOException;
import java.util.Calendar;
import java.util.List;
import java.util.stream.Stream;

import static com.fullteaching.e2e.no_elastest.common.Constants.*;
import static java.lang.invoke.MethodHandles.lookup;
import static org.junit.jupiter.api.Assertions.*;
import static org.slf4j.LoggerFactory.getLogger;


@Tag("e2e")
@DisplayName("E2E tests for FullTeaching Login Session")
class LoggedForumTest extends BaseLoggedTest {
    protected final String courseName = "Pseudoscientific course for treating the evil eye";
    protected final String[] months = {"January", "February", "March", "April",
            "May", "June", "July", "August", "September",
            "October", "November", "December"};

    public LoggedForumTest() {
        super();
    }

    public static Stream<Arguments> data() throws IOException {
        return ParameterLoader.getTestUsers();
    }

//TC
    /**
     * This test get login and navigate to the courses zone checking if there are
     * any courses. Second and go to the Pseudo... course accessing to the forum
     * and looks if its enable.If It's enable, load all the entries and checks for
     * someone that have comments on it.Finally, with the two previous conditions,
     * makes an assertEquals() to ensure that both are accomplishment
     */
    @AccessMode(resID = "loginservice", concurrency = 10, sharing = true, accessMode = "READONLY")
    @AccessMode(resID = "openvidumock", concurrency = 10, sharing = true, accessMode = "NOACCESS")
    @AccessMode(resID = "forum", concurrency = 10, sharing = true, accessMode = "READONLY")
    @AccessMode(resID = "executor", concurrency = 1, accessMode = "READWRITE")
    @AccessMode(resID = "webbrowser", concurrency = 1, accessMode = "READWRITE")
    @AccessMode(resID = "webserver", concurrency = 1, accessMode = "READWRITE")
    @ParameterizedTest
    @MethodSource("data")
    void forumLoadEntriesTest(String mail, String password, String role) {
        this.slowLogin(user, mail, password);
        try {
            //navigate to courses.
            NavigationUtilities.toCoursesHome(driver);
            List<String> courses = CourseNavigationUtilities.getCoursesList(driver);
            assertTrue(courses.size() > 0, "No courses in the list");
            //find course with forum activated
            boolean activated_forum_on_some_test = false;
            boolean has_comments = false;
            for (String course_name : courses) {
                //go to each of the courses
                WebElement course = CourseNavigationUtilities.getCourseByName(driver, course_name);
                course.findElement(COURSE_LIST_COURSE_TITLE).click();
                Wait.notTooMuch(driver).until(ExpectedConditions.visibilityOfElementLocated(By.id(TABS_DIV_ID)));
                log.info("Navigating to the forum and checking if its enabled");
                //go to forum tab to check if enabled:
                //load forum
                CourseNavigationUtilities.go2Tab(driver, FORUM_ICON);
                if (ForumNavigationUtilities.isForumEnabled(CourseNavigationUtilities.getTabContent(driver, FORUM_ICON))) {
                    activated_forum_on_some_test = true;
                    log.info("Loading the entries list");
                    //Load list of entries
                    List<String> entries_list = ForumNavigationUtilities.getFullEntryList(driver);
                    if (entries_list.size() > 0) {
                        //Go into first entry
                        for (String entry_name : entries_list) {
                            log.info("Checking the entry with name: {}", entry_name);
                            WebElement entry = ForumNavigationUtilities.getEntry(driver, entry_name);
                            Click.element(driver, entry.findElement(FORUM_ENTRY_LIST_ENTRY_TITLE));
                            //Load comments
                            Wait.notTooMuch(driver).until(ExpectedConditions.visibilityOfElementLocated(FORUM_COMMENT_LIST));
                            List<WebElement> comments = ForumNavigationUtilities.getComments(driver);
                            log.info("Checking if the entry has comments");
                            if (comments.size() > 0) {
                                has_comments = true;
                                log.info("Comments found, saving them");

                                ForumNavigationUtilities.getUserComments(driver, userName);
                            }//else go to next entry
                            Click.element(driver, DOMManager.getParent(driver, driver.findElement(BACK_TO_ENTRIES_LIST_ICON)));
                        }
                    }//(else) if no entries go to next course
                }//(else) if forum no active go to next course
                log.info("Returning to the main dashboard");
                driver = Click.element(driver, BACK_TO_DASHBOARD);
            }
            assertTrue((activated_forum_on_some_test && has_comments), "There isn't any forum that can be used to test this [Or not activated or no entry lists or not comments]");
        } catch (ElementNotFoundException notFoundException) {
            fail("Failed to navigate to courses forum:: " + notFoundException.getClass() + ": " + notFoundException.getLocalizedMessage());
        }
    }
//TC
   @AccessMode(resID = "loginservice", concurrency = 10, sharing = true, accessMode = "READONLY")
   @AccessMode(resID = "openvidumock", concurrency = 10, sharing = true, accessMode = "NOACCESS")
   @AccessMode(resID = "forum", concurrency = 1, sharing = false, accessMode = "READWRITE")
   @AccessMode(resID = "executor", concurrency = 1, accessMode = "READWRITE")
   @AccessMode(resID = "webbrowser", concurrency = 1, accessMode = "READWRITE")
   @AccessMode(resID = "webserver", concurrency = 1, accessMode = "READWRITE")
   @ParameterizedTest
   @MethodSource("data")
   void forumNewEntryTest(String mail, String password, String role) {// 48+ 104 +   28 set up +13 lines teardown =193
       this.slowLogin(user, mail, password); //24 lines
       Calendar calendar = Calendar.getInstance();
       calendar.setTimeInMillis(System.currentTimeMillis());
       int mYear = calendar.get(Calendar.YEAR);
       int mMonth = calendar.get(Calendar.MONTH);
       int mDay = calendar.get(Calendar.DAY_OF_MONTH);
       int mHour = calendar.get(Calendar.HOUR_OF_DAY);
       int mMinute = calendar.get(Calendar.MINUTE);
       int mSecond = calendar.get(Calendar.SECOND);
       log.info("Setting new entry title and content");
       String newEntryTitle = "New Entry Test " + mDay + mMonth + mYear + mHour + mMinute + mSecond;
       String newEntryContent = "This is the content written on the " + mDay + " of " + months[mMonth] + ", " + mHour + ":" + mMinute + "," + mSecond;
       log.info("Navigating to courses tab");
       try {
           log.info("Navigating to courses tab");
           //navigate to courses.
           if (NavigationUtilities.amINotHere(driver, COURSES_URL.replace("__HOST__", HOST))) {
               NavigationUtilities.toCoursesHome(driver);//3lines
           }
           WebElement course = CourseNavigationUtilities.getCourseByName(driver, courseName);//14lines
           log.info("Entering the course List");
           course.findElement(COURSE_LIST_COURSE_TITLE).click();

           Wait.notTooMuch(driver).until(ExpectedConditions.visibilityOfElementLocated(By.id(TABS_DIV_ID)));
           log.info("Entering the Forum");
           CourseNavigationUtilities.go2Tab(driver, FORUM_ICON); //4lines
           assertTrue(ForumNavigationUtilities.isForumEnabled(CourseNavigationUtilities.getTabContent(driver, FORUM_ICON)), "Forum not activated"); //6lines
           Wait.waitForPageLoaded(driver);
           ForumNavigationUtilities.newEntry(driver, newEntryTitle, newEntryContent); //16lines
           //Retorch Modification, this test fails due to the speed of the browser
           Wait.waitForPageLoaded(driver);
           //Check entry... Flake Here
           WebElement newEntry = ForumNavigationUtilities.getEntry(driver, newEntryTitle);//16lines
           Wait.waitForPageLoaded(driver);
           assertEquals(newEntry.findElement(FORUM_ENTRY_LIST_ENTRY_USER).getText(), userName, "Incorrect user");
           Click.element(driver, newEntry.findElement(FORUM_ENTRY_LIST_ENTRY_TITLE));
           Wait.notTooMuch(driver).until(ExpectedConditions.visibilityOfElementLocated(FORUM_COMMENT_LIST));
           WebElement entryTitleRow = driver.findElement(FORUM_COMMENT_LIST_ENTRY_TITLE);
           assertEquals(entryTitleRow.getText().split("\n")[0], newEntryTitle, "Incorrect Entry Title");
           assertEquals(entryTitleRow.findElement(FORUM_COMMENT_LIST_ENTRY_USER).getText(), userName, "Incorrect User for Entry");
           //first comment should be the inserted while creating the entry
           Wait.waitForPageLoaded(driver);
           List<WebElement> comments = ForumNavigationUtilities.getComments(driver);
           assertFalse(comments.size() < 1, "No comments on the entry");
           Wait.notTooMuch(driver).until(ExpectedConditions.visibilityOfElementLocated(FORUM_COMMENT_LIST));
           Wait.waitForPageLoaded(driver);
           WebElement newComment = comments.get(0);
           String commentContent = newComment.findElement(FORUM_COMMENT_LIST_COMMENT_CONTENT).getText();
           assertEquals(commentContent, newEntryContent, "Bad content of comment");
           Wait.waitForPageLoaded(driver);
           String comment = newComment.findElement(FORUM_COMMENT_LIST_COMMENT_USER).getText();
           assertEquals(comment, userName, "Bad user in comment");
       } catch (ElementNotFoundException notFoundException) {
           Assertions.fail("Failed to navigate to course forum:: " + notFoundException.getClass() + ": " + notFoundException.getLocalizedMessage());
       }
       //Fix Flaky test Navigating to the mainpage to logout...
       user.getDriver().get(APP_URL);
   }
//TC
    @AccessMode(resID = "loginservice", concurrency = 10, sharing = true, accessMode = "READONLY")
    @AccessMode(resID = "openvidumock", concurrency = 10, sharing = true, accessMode = "NOACCESS")
    @AccessMode(resID = "course", concurrency = 15, sharing = true, accessMode = "DYNAMIC")
    @AccessMode(resID = "executor", concurrency = 1, accessMode = "READWRITE")
    @AccessMode(resID = "webbrowser", concurrency = 1, accessMode = "READWRITE")
    @AccessMode(resID = "webserver", concurrency = 1, accessMode = "READWRITE")
    void teacherCreateAndDeletecourseTest (String mail, String password, String role) throws ElementNotFoundException {
          // Setup
          this.slowLogin(user, mail, password);

          // Create a new course
          String courseTitle = "Test Course_" + System.currentTimeMillis();
          CourseNavigationUtilities.newCourse(user.getDriver(), courseTitle);
          //TO-DO the problem its here
          // Verify the course has been created
          assertTrue(checkIfCourseExists(driver, courseTitle));

          // Delete the course
          CourseNavigationUtilities.deleteCourse(user.getDriver(), courseTitle);

          // Verify the course has been deleted
          assertFalse(checkIfCourseExists(driver, courseTitle));

          // Teardown
          user.getDriver().get(APP_URL);
      }
//TC
    @AccessMode(resID = "loginservice", concurrency = 10, sharing = true, accessMode = "READONLY")
    @AccessMode(resID = "openvidumock", concurrency = 10, sharing = true, accessMode = "NOACCESS")
    @AccessMode(resID = "course", concurrency = 15, sharing = true, accessMode = "READONLY")
    @AccessMode(resID = "executor", concurrency = 1, accessMode = "READWRITE")
    @AccessMode(resID = "webbrowser", concurrency = 1, accessMode = "READWRITE")
    @AccessMode(resID = "webserver", concurrency = 1, accessMode = "READWRITE")
    void teachercourseMainTest(String mail, String password, String role) {
         this.slowLogin(user, mail, password);
                try {

                    NavigationUtilities.toCoursesHome(driver); //4lines
                    Wait.notTooMuch(driver).until(ExpectedConditions.presenceOfElementLocated(By.xpath(FIRST_COURSE_XPATH)));
                    Click.element(driver, By.xpath(FIRST_COURSE_XPATH));
                    Wait.notTooMuch(driver).until(ExpectedConditions.visibilityOfElementLocated(By.id(TABS_DIV_ID)));
                } catch (Exception e) {
                    fail("Failed to load Courses Tabs" + e.getClass() + ": " + e.getLocalizedMessage());
                }
                //Check tabs
                //Home tab
                try {
                    CourseNavigationUtilities.go2Tab(driver, HOME_ICON); //4lines
                } catch (Exception e) {
                    fail("Failed to load home tab" + e.getClass() + ": " + e.getLocalizedMessage());
                }
                try {
                    CourseNavigationUtilities.go2Tab(driver, SESSION_ICON); //4lines
                } catch (Exception e) {
                    fail("Failed to load session tab" + e.getClass() + ": " + e.getLocalizedMessage());
                }
                try {
                    CourseNavigationUtilities.go2Tab(driver, FORUM_ICON); //4lines
                } catch (Exception e) {
                    fail("Failed to load forum tab" + e.getClass() + ": " + e.getLocalizedMessage());
                }
                try {
                    CourseNavigationUtilities.go2Tab(driver, FILES_ICON); //4lines
                } catch (Exception e) {
                    fail("Failed to load files tab" + e.getClass() + ": " + e.getLocalizedMessage());
                }
                try {
                    CourseNavigationUtilities.go2Tab(driver, ATTENDERS_ICON); //4lines
                } catch (Exception e) {
                    fail("Failed to load attenders tab" + e.getClass() + ": " + e.getLocalizedMessage());
                }
    }
//TC
}
